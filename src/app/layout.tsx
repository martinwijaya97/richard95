import type { Metadata } from 'next';
import { Inter } from 'next/font/google';
import './globals.css';

// import {
//   ConnectionProvider,
//   WalletProvider,
//   useWallet,
// } from '@solana/wallet-adapter-react';
// import { WalletAdapterNetwork } from '@solana/wallet-adapter-base';
// import {
//   PhantomWalletAdapter,
//   SolflareWalletAdapter,
// } from '@solana/wallet-adapter-wallets';
// import { WalletModalProvider } from '@solana/wallet-adapter-react-ui';
// import solanaWeb3, { clusterApiUrl } from '@solana/web3.js';
// import '@solana/wallet-adapter-react-ui/styles.css'; // Ensure this is included

import React, { useMemo } from 'react';

const inter = Inter({ subsets: ['latin'] });

export const metadata: Metadata = {
  title: 'Martin Portfolio',
  description: 'Generated by create next app',
};

// const connection = new solanaWeb3.Connection(
//   'https://stylish-weathered-model.solana-mainnet.quiknode.pro/ba7eab7ec450bf7f770fbfc73f03390391468153',
//   {
//     commitment: 'confirmed',
//     confirmTransactionInitialTimeout: 60000,
//   }
// );

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  // Cluster URL (you can replace with a different network if needed)
  // const network = connection;

  // // Memoizing the wallets to prevent unnecessary re-renders
  // const wallets = useMemo(
  //   () => [new PhantomWalletAdapter(), new SolflareWalletAdapter()],
  //   []
  // );

  // const network = WalletAdapterNetwork.Devnet;
  // // You can also provide a custom RPC endpoint.
  // const endpoint = useMemo(() => clusterApiUrl(network), [network]);

  // const wallets = useMemo(
  //   () => [
  //     /**
  //      * Wallets that implement either of these standards will be available automatically.
  //      *
  //      *   - Solana Mobile Stack Mobile Wallet Adapter Protocol
  //      *     (https://github.com/solana-mobile/mobile-wallet-adapter)
  //      *   - Solana Wallet Standard
  //      *     (https://github.com/anza-xyz/wallet-standard)
  //      *
  //      * If you wish to support a wallet that supports neither of those standards,
  //      * instantiate its legacy wallet adapter here. Common legacy adapters can be found
  //      * in the npm package `@solana/wallet-adapter-wallets`.
  //      */
  //   ],
  //   // eslint-disable-next-line react-hooks/exhaustive-deps
  //   [network]
  // );

  return (
    <html lang='en'>
      <body className={inter.className}>
        {/* <ConnectionProvider endpoint={endpoint}>
          <WalletProvider wallets={wallets} autoConnect> */}
        {children}
        {/* </WalletProvider>
        </ConnectionProvider> */}
        {/* <ConnectionProvider endpoint={network}> */}
        {/* Wrapping the wallet providers */}
        {/* <WalletProvider wallets={wallets} autoConnect> */}
        {/* <WalletModalProvider>{children}</WalletModalProvider> */}
        {/* </WalletProvider> */}
        {/* </ConnectionProvider> */}
      </body>
    </html>
  );
}
